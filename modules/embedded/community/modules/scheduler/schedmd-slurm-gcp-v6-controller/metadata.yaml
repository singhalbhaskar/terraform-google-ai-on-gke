apiVersion: blueprints.cloud.google.com/v1alpha1
kind: BlueprintMetadata
metadata:
  name: terraform-google-ai-on-gke-embedded/community/modules/scheduler/schedmd-slurm-gcp-v-6-controller
  annotations:
    config.kubernetes.io/local-config: "true"
spec:
  info:
    title: terraform-google-ai-on-gke
    source:
      repo: https://github.com/singhalbhaskar/terraform-google-ai-on-gke
      sourceType: git
      dir: /modules/embedded/community/modules/scheduler/schedmd-slurm-gcp-v6-controller
    version: 1.45.0
    actuationTool:
      flavor: Terraform
      version: ">= 1.3"
    description: {}
    icon: assets/icon.png
  content:
    subBlueprints:
      - name: cleanup_compute
        location: modules/cleanup_compute
      - name: cleanup_tpu
        location: modules/cleanup_tpu
      - name: slurm_files
        location: modules/slurm_files
    examples:
      - name: simple_example
        location: examples/simple_example
  interfaces:
    variables:
      - name: disk_size_gb
        description: Boot disk size in GB.
        varType: number
        defaultValue: 50
      - name: min_cpu_platform
        description: |
          Specifies a minimum CPU platform. Applicable values are the friendly names of
          CPU platforms, such as Intel Haswell or Intel Skylake. See the complete list:
          https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform
        varType: string
      - name: allow_automatic_updates
        description: |
          If false, disables automatic system package updates on the created instances.  This feature is
          only available on supported images (or images derived from them).  For more details, see
          https://cloud.google.com/compute/docs/instances/create-hpc-vm#disable_automatic_updates
        varType: bool
        defaultValue: true
      - name: subnetwork_self_link
        description: Subnet to deploy to.
        varType: string
        required: true
      - name: service_account
        description: "DEPRECATED: Use `service_account_email` and `service_account_scopes` instead."
        varType: |-
          object({
              email  = string
              scopes = set(string)
            })
      - name: instance_image_custom
        description: |
          A flag that designates that the user is aware that they are requesting
          to use a custom and potentially incompatible image for this Slurm on
          GCP module.

          If the field is set to false, only the compatible families and project
          names will be accepted.  The deployment will fail with any other image
          family or name.  If set to true, no checks will be done.

          See: https://goo.gle/hpc-slurm-images
        varType: bool
        defaultValue: false
      - name: bandwidth_tier
        description: "  Configures the network interface card and the maximum egress bandwidth for VMs.\n  - Setting `platform_default` respects the Google Cloud Platform API default values for networking.\n  - Setting `virtio_enabled` explicitly selects the VirtioNet network adapter.\n  - Setting `gvnic_enabled` selects the gVNIC network adapter (without Tier 1 high bandwidth).\n  - Setting `tier_1_enabled` selects both the gVNIC adapter and Tier 1 high bandwidth networking.\n  - Note: both gVNIC and Tier 1 networking require a VM image with gVNIC support as well as specific VM families and shapes.\n  - See [official docs](https://cloud.google.com/compute/docs/networking/configure-vm-with-high-bandwidth-configuration) for more details.\n"
        varType: string
        defaultValue: platform_default
      - name: preemptible
        description: Allow the instance to be preempted.
        varType: bool
        defaultValue: false
      - name: machine_type
        description: Machine type to create.
        varType: string
        defaultValue: c2-standard-4
      - name: disk_auto_delete
        description: Whether or not the boot disk should be auto-deleted.
        varType: bool
        defaultValue: true
      - name: additional_disks
        description: List of maps of disks.
        varType: |-
          list(object({
              disk_name    = string
              device_name  = string
              disk_type    = string
              disk_size_gb = number
              disk_labels  = map(string)
              auto_delete  = bool
              boot         = bool
            }))
        defaultValue: []
      - name: disable_smt
        description: "DEPRECATED: Use `enable_smt` instead."
        varType: bool
      - name: enable_smt
        description: Enables Simultaneous Multi-Threading (SMT) on instance.
        varType: bool
        defaultValue: false
      - name: enable_controller_public_ips
        description: If set to true. The controller will have a random public IP assigned to it. Ignored if access_config is set.
        varType: bool
        defaultValue: false
      - name: disable_controller_public_ips
        description: "DEPRECATED: Use `enable_controller_public_ips` instead."
        varType: bool
      - name: disk_type
        description: Boot disk type, can be either hyperdisk-balanced, pd-ssd, pd-standard, pd-balanced, or pd-extreme.
        varType: string
        defaultValue: pd-ssd
      - name: enable_confidential_vm
        description: "Enable the Confidential VM configuration. Note: the instance image must support option."
        varType: bool
        defaultValue: false
      - name: enable_shielded_vm
        description: "Enable the Shielded VM configuration. Note: the instance image must support option."
        varType: bool
        defaultValue: false
      - name: tags
        description: Network tag list.
        varType: list(string)
        defaultValue: []
      - name: shielded_instance_config
        description: |
          Shielded VM configuration for the instance. Note: not used unless
          enable_shielded_vm is 'true'.
            enable_integrity_monitoring : Compare the most recent boot measurements to the
            integrity policy baseline and return a pair of pass/fail results depending on
            whether they match or not.
            enable_secure_boot : Verify the digital signature of all boot components, and
            halt the boot process if signature verification fails.
            enable_vtpm : Use a virtualized trusted platform module, which is a
            specialized computer chip you can use to encrypt objects like keys and
            certificates.
        varType: |-
          object({
              enable_integrity_monitoring = bool
              enable_secure_boot          = bool
              enable_vtpm                 = bool
            })
        defaultValue:
          enable_integrity_monitoring: true
          enable_secure_boot: true
          enable_vtpm: true
      - name: labels
        description: Labels, provided as a map.
        varType: map(string)
        defaultValue: {}
      - name: disk_labels
        description: Labels specific to the boot disk. These will be merged with var.labels.
        varType: map(string)
        defaultValue: {}
      - name: guest_accelerator
        description: List of the type and count of accelerator cards attached to the instance.
        varType: |-
          list(object({
              type  = string,
              count = number
            }))
        defaultValue: []
      - name: static_ips
        description: List of static IPs for VM instances.
        varType: list(string)
        defaultValue: []
      - name: metadata
        description: Metadata, provided as a map.
        varType: map(string)
        defaultValue: {}
      - name: instance_image
        description: |
          Defines the image that will be used in the Slurm controller VM instance.

          Expected Fields:
          name: The name of the image. Mutually exclusive with family.
          family: The image family to use. Mutually exclusive with name.
          project: The project where the image is hosted.

          For more information on creating custom images that comply with Slurm on GCP
          see the "Slurm on GCP Custom Images" section in docs/vm-images.md.
        varType: map(string)
        defaultValue:
          family: slurm-gcp-6-8-hpc-rocky-linux-8
          project: schedmd-slurm-public
      - name: project_id
        description: Project ID to create resources in.
        varType: string
        required: true
      - name: can_ip_forward
        description: Enable IP forwarding, for NAT instances for example.
        varType: bool
        defaultValue: false
      - name: service_account_scopes
        description: Scopes to attach to the controller instance.
        varType: set(string)
        defaultValue:
          - https://www.googleapis.com/auth/cloud-platform
      - name: instance_template
        description: "DEPRECATED: Instance template can not be specified for controller."
        varType: string
      - name: enable_oslogin
        description: |
          Enables Google Cloud os-login for user login and authentication for VMs.
          See https://cloud.google.com/compute/docs/oslogin
        varType: bool
        defaultValue: true
      - name: on_host_maintenance
        description: Instance availability Policy.
        varType: string
        defaultValue: MIGRATE
      - name: service_account_email
        description: Service account e-mail address to attach to the controller instance.
        varType: string
      - name: deployment_name
        description: Name of the deployment.
        varType: string
        required: true
      - name: slurm_cluster_name
        description: |
          Cluster name, used for resource naming and slurm accounting.
          If not provided it will default to the first 8 characters of the deployment name (removing any invalid characters).
        varType: string
      - name: region
        description: The default region to place resources in.
        varType: string
        required: true
      - name: zone
        description: |
          Zone where the instances should be created. If not specified, instances will be
          spread across available zones in the region.
        varType: string
      - name: create_bucket
        description: |
          Create GCS bucket instead of using an existing one.
        varType: bool
        defaultValue: true
      - name: bucket_name
        description: |
          Name of GCS bucket.
          Ignored when 'create_bucket' is true.
        varType: string
      - name: bucket_dir
        description: Bucket directory for cluster files to be put into. If not specified, then one will be chosen based on slurm_cluster_name.
        varType: string
      - name: login_nodes
        description: List of slurm login instance definitions.
        varType: |-
          list(object({
              name_prefix = string
              access_config = optional(list(object({
                nat_ip       = string
                network_tier = string
              })))
              additional_disks = optional(list(object({
                disk_name    = optional(string)
                device_name  = optional(string)
                disk_size_gb = optional(number)
                disk_type    = optional(string)
                disk_labels  = optional(map(string), {})
                auto_delete  = optional(bool, true)
                boot         = optional(bool, false)
              })), [])
              additional_networks = optional(list(object({
                access_config = optional(list(object({
                  nat_ip       = string
                  network_tier = string
                })), [])
                alias_ip_range = optional(list(object({
                  ip_cidr_range         = string
                  subnetwork_range_name = string
                })), [])
                ipv6_access_config = optional(list(object({
                  network_tier = string
                })), [])
                network            = optional(string)
                network_ip         = optional(string, "")
                nic_type           = optional(string)
                queue_count        = optional(number)
                stack_type         = optional(string)
                subnetwork         = optional(string)
                subnetwork_project = optional(string)
              })), [])
              bandwidth_tier         = optional(string, "platform_default")
              can_ip_forward         = optional(bool, false)
              disable_smt            = optional(bool, false)
              disk_auto_delete       = optional(bool, true)
              disk_labels            = optional(map(string), {})
              disk_size_gb           = optional(number)
              disk_type              = optional(string, "n1-standard-1")
              enable_confidential_vm = optional(bool, false)
              enable_oslogin         = optional(bool, true)
              enable_shielded_vm     = optional(bool, false)
              gpu = optional(object({
                count = number
                type  = string
              }))
              labels              = optional(map(string), {})
              machine_type        = optional(string)
              metadata            = optional(map(string), {})
              min_cpu_platform    = optional(string)
              num_instances       = optional(number, 1)
              on_host_maintenance = optional(string)
              preemptible         = optional(bool, false)
              region              = optional(string)
              service_account = optional(object({
                email  = optional(string)
                scopes = optional(list(string), ["https://www.googleapis.com/auth/cloud-platform"])
              }))
              shielded_instance_config = optional(object({
                enable_integrity_monitoring = optional(bool, true)
                enable_secure_boot          = optional(bool, true)
                enable_vtpm                 = optional(bool, true)
              }))
              source_image_family  = optional(string)
              source_image_project = optional(string)
              source_image         = optional(string)
              static_ips           = optional(list(string), [])
              subnetwork           = string
              spot                 = optional(bool, false)
              tags                 = optional(list(string), [])
              zone                 = optional(string)
              termination_action   = optional(string)
            }))
        defaultValue: []
      - name: nodeset
        description: Define nodesets, as a list.
        varType: |-
          list(object({
              node_count_static      = optional(number, 0)
              node_count_dynamic_max = optional(number, 1)
              node_conf              = optional(map(string), {})
              nodeset_name           = string
              additional_disks = optional(list(object({
                disk_name    = optional(string)
                device_name  = optional(string)
                disk_size_gb = optional(number)
                disk_type    = optional(string)
                disk_labels  = optional(map(string), {})
                auto_delete  = optional(bool, true)
                boot         = optional(bool, false)
              })), [])
              bandwidth_tier                   = optional(string, "platform_default")
              can_ip_forward                   = optional(bool, false)
              disable_smt                      = optional(bool, false)
              disk_auto_delete                 = optional(bool, true)
              disk_labels                      = optional(map(string), {})
              disk_size_gb                     = optional(number)
              disk_type                        = optional(string)
              enable_confidential_vm           = optional(bool, false)
              enable_placement                 = optional(bool, false)
              placement_max_distance           = optional(number, null)
              enable_oslogin                   = optional(bool, true)
              enable_shielded_vm               = optional(bool, false)
              enable_maintenance_reservation   = optional(bool, false)
              enable_opportunistic_maintenance = optional(bool, false)
              gpu = optional(object({
                count = number
                type  = string
              }))
              dws_flex = object({
                enabled          = bool
                max_run_duration = number
                use_job_duration = bool
              })
              labels                   = optional(map(string), {})
              machine_type             = optional(string)
              maintenance_interval     = optional(string)
              instance_properties_json = string
              metadata                 = optional(map(string), {})
              min_cpu_platform         = optional(string)
              network_tier             = optional(string, "STANDARD")
              network_storage = optional(list(object({
                server_ip             = string
                remote_mount          = string
                local_mount           = string
                fs_type               = string
                mount_options         = string
                client_install_runner = optional(map(string))
                mount_runner          = optional(map(string))
              })), [])
              on_host_maintenance = optional(string)
              preemptible         = optional(bool, false)
              region              = optional(string)
              service_account = optional(object({
                email  = optional(string)
                scopes = optional(list(string), ["https://www.googleapis.com/auth/cloud-platform"])
              }))
              shielded_instance_config = optional(object({
                enable_integrity_monitoring = optional(bool, true)
                enable_secure_boot          = optional(bool, true)
                enable_vtpm                 = optional(bool, true)
              }))
              source_image_family  = optional(string)
              source_image_project = optional(string)
              source_image         = optional(string)
              subnetwork_self_link = string
              additional_networks = optional(list(object({
                network            = string
                subnetwork         = string
                subnetwork_project = string
                network_ip         = string
                nic_type           = string
                stack_type         = string
                queue_count        = number
                access_config = list(object({
                  nat_ip       = string
                  network_tier = string
                }))
                ipv6_access_config = list(object({
                  network_tier = string
                }))
                alias_ip_range = list(object({
                  ip_cidr_range         = string
                  subnetwork_range_name = string
                }))
              })))
              access_config = optional(list(object({
                nat_ip       = string
                network_tier = string
              })))
              spot               = optional(bool, false)
              tags               = optional(list(string), [])
              termination_action = optional(string)
              reservation_name   = optional(string)
              future_reservation = string
              startup_script = optional(list(object({
                filename = string
              content = string })), [])

              zone_target_shape = string
              zone_policy_allow = set(string)
              zone_policy_deny  = set(string)
            }))
        defaultValue: []
      - name: nodeset_tpu
        description: Define TPU nodesets, as a list.
        varType: |-
          list(object({
              node_count_static      = optional(number, 0)
              node_count_dynamic_max = optional(number, 5)
              nodeset_name           = string
              enable_public_ip       = optional(bool, false)
              node_type              = string
              accelerator_config = optional(object({
                topology = string
                version  = string
                }), {
                topology = ""
                version  = ""
              })
              tf_version   = string
              preemptible  = optional(bool, false)
              preserve_tpu = optional(bool, false)
              zone         = string
              data_disks   = optional(list(string), [])
              docker_image = optional(string, "")
              network_storage = optional(list(object({
                server_ip             = string
                remote_mount          = string
                local_mount           = string
                fs_type               = string
                mount_options         = string
                client_install_runner = optional(map(string))
                mount_runner          = optional(map(string))
              })), [])
              subnetwork = string
              service_account = optional(object({
                email  = optional(string)
                scopes = optional(list(string), ["https://www.googleapis.com/auth/cloud-platform"])
              }))
              project_id = string
              reserved   = optional(string, false)
            }))
        defaultValue: []
      - name: nodeset_dyn
        description: Defines dynamic nodesets, as a list.
        varType: |-
          list(object({
              nodeset_name    = string
              nodeset_feature = string
            }))
        defaultValue: []
      - name: partitions
        description: |
          Cluster partitions as a list. See module slurm_partition.
        varType: |-
          list(object({
              partition_name        = string
              partition_conf        = optional(map(string), {})
              partition_nodeset     = optional(list(string), [])
              partition_nodeset_dyn = optional(list(string), [])
              partition_nodeset_tpu = optional(list(string), [])
              enable_job_exclusive  = optional(bool, false)
            }))
        required: true
      - name: enable_debug_logging
        description: Enables debug logging mode.
        varType: bool
        defaultValue: false
      - name: extra_logging_flags
        description: The only available flag is `trace_api`
        varType: map(bool)
        defaultValue: {}
      - name: enable_cleanup_compute
        description: |
          Enables automatic cleanup of compute nodes and resource policies (e.g.
          placement groups) managed by this module, when cluster is destroyed.

          *WARNING*: Toggling this off will impact the running workload.
          Deployed compute nodes will be destroyed.
        varType: bool
        defaultValue: true
      - name: enable_bigquery_load
        description: |
          Enables loading of cluster job usage into big query.

          NOTE: Requires Google Bigquery API.
        varType: bool
        defaultValue: false
      - name: cloud_parameters
        description: cloud.conf options. Defaults inherited from [Slurm GCP repo](https://github.com/GoogleCloudPlatform/slurm-gcp/blob/master/terraform/slurm_cluster/modules/slurm_files/README_TF.md#input_cloud_parameters)
        varType: |-
          object({
              no_comma_params      = optional(bool, false)
              private_data         = optional(list(string))
              scheduler_parameters = optional(list(string))
              resume_rate          = optional(number)
              resume_timeout       = optional(number)
              suspend_rate         = optional(number)
              suspend_timeout      = optional(number)
              topology_plugin      = optional(string)
              topology_param       = optional(string)
              tree_width           = optional(number)
            })
        defaultValue: {}
      - name: enable_default_mounts
        description: |
          Enable default global network storage from the controller
          - /home
          - /apps
          Warning: If these are disabled, the slurm etc and munge dirs must be added
          manually, or some other mechanism must be used to synchronize the slurm conf
          files and the munge key across the cluster.
        varType: bool
        defaultValue: true
      - name: network_storage
        description: An array of network attached storage mounts to be configured on all instances.
        varType: |-
          list(object({
              server_ip             = string,
              remote_mount          = string,
              local_mount           = string,
              fs_type               = string,
              mount_options         = string,
              client_install_runner = optional(map(string))
              mount_runner          = optional(map(string))
            }))
        defaultValue: []
      - name: login_network_storage
        description: An array of network attached storage mounts to be configured on all login nodes.
        varType: |-
          list(object({
              server_ip     = string,
              remote_mount  = string,
              local_mount   = string,
              fs_type       = string,
              mount_options = string,
            }))
        defaultValue: []
      - name: slurmdbd_conf_tpl
        description: Slurm slurmdbd.conf template file path.
        varType: string
      - name: slurm_conf_tpl
        description: Slurm slurm.conf template file path.
        varType: string
      - name: cgroup_conf_tpl
        description: Slurm cgroup.conf template file path.
        varType: string
      - name: controller_startup_script
        description: Startup script used by the controller VM.
        varType: string
        defaultValue: "# no-op"
      - name: controller_startup_scripts_timeout
        description: |
          The timeout (seconds) applied to each script in controller_startup_scripts. If
          any script exceeds this timeout, then the instance setup process is considered
          failed and handled accordingly.

          NOTE: When set to 0, the timeout is considered infinite and thus disabled.
        varType: number
        defaultValue: 300
      - name: login_startup_script
        description: Startup script used by the login VMs.
        varType: string
        defaultValue: "# no-op"
      - name: login_startup_scripts_timeout
        description: |
          The timeout (seconds) applied to each script in login_startup_scripts. If
          any script exceeds this timeout, then the instance setup process is considered
          failed and handled accordingly.

          NOTE: When set to 0, the timeout is considered infinite and thus disabled.
        varType: number
        defaultValue: 300
      - name: compute_startup_script
        description: Startup script used by the compute VMs.
        varType: string
        defaultValue: "# no-op"
      - name: compute_startup_scripts_timeout
        description: |
          The timeout (seconds) applied to each script in compute_startup_scripts. If
          any script exceeds this timeout, then the instance setup process is considered
          failed and handled accordingly.

          NOTE: When set to 0, the timeout is considered infinite and thus disabled.
        varType: number
        defaultValue: 300
      - name: prolog_scripts
        description: |
          List of scripts to be used for Prolog. Programs for the slurmd to execute
          whenever it is asked to run a job step from a new job allocation.
          See https://slurm.schedmd.com/slurm.conf.html#OPT_Prolog.
        varType: |-
          list(object({
              filename = string
              content  = optional(string)
              source   = optional(string)
            }))
        defaultValue: []
      - name: epilog_scripts
        description: |
          List of scripts to be used for Epilog. Programs for the slurmd to execute
          on every node when a user's job completes.
          See https://slurm.schedmd.com/slurm.conf.html#OPT_Epilog.
        varType: |-
          list(object({
              filename = string
              content  = optional(string)
              source   = optional(string)
            }))
        defaultValue: []
      - name: enable_external_prolog_epilog
        description: |
          Automatically enable a script that will execute prolog and epilog scripts
          shared by NFS from the controller to compute nodes. Find more details at:
          https://github.com/GoogleCloudPlatform/slurm-gcp/blob/master/tools/prologs-epilogs/README.md
        varType: bool
      - name: cloudsql
        description: |
          Use this database instead of the one on the controller.
            server_ip : Address of the database server.
            user      : The user to access the database as.
            password  : The password, given the user, to access the given database. (sensitive)
            db_name   : The database to access.
            user_managed_replication : The list of location and (optional) kms_key_name for secret
        varType: |-
          object({
              server_ip = string
              user      = string
              password  = string # sensitive
              db_name   = string
              user_managed_replication = optional(list(object({
                location     = string
                kms_key_name = optional(string)
              })), [])
            })
      - name: enable_slurm_gcp_plugins
        description: |
          Enables calling hooks in scripts/slurm_gcp_plugins during cluster resume and suspend.
        varType: any
        defaultValue: false
      - name: universe_domain
        description: Domain address for alternate API universe
        varType: string
        defaultValue: googleapis.com
      - name: endpoint_versions
        description: Version of the API to use (The compute service is the only API currently supported)
        varType: |-
          object({
              compute = string
            })
        defaultValue:
          compute: beta
      - name: gcloud_path_override
        description: Directory of the gcloud executable to be used during cleanup
        varType: string
        defaultValue: ""
      - name: enable_devel
        description: "DEPRECATED: `enable_devel` is always on."
        varType: bool
      - name: disable_default_mounts
        description: "DEPRECATED: Use `enable_default_mounts` instead."
        varType: bool
    outputs:
      - name: instructions
        description: Post deployment instructions.
      - name: slurm_bucket_path
        description: Bucket path used by cluster.
      - name: slurm_cluster_name
        description: Slurm cluster name.
      - name: slurm_controller_instance
        description: Compute instance of controller node
      - name: slurm_login_instances
        description: Compute instances of login nodes
  requirements:
    roles:
      - level: Project
        roles:
          - roles/owner
    services:
      - cloudresourcemanager.googleapis.com
      - storage-api.googleapis.com
      - serviceusage.googleapis.com
    providerVersions:
      - source: hashicorp/google
        version: ">= 4.84"
